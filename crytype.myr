use regex
use std
use "misc"

pkg fltr =
	const crytype : (line : byte[:] -> byte[:])
;;

type state = struct
	mangle : union
		`Init
		`Count uint
		`Swap char
		`Mangle
	;;
	word   : bool
;;

const step = {state : state#
	const odds = [24, 16, 12, 6, 3, 2, 1]
	match state.mangle
	| `Init: state.mangle = `Count 0
	| `Count n: state.mangle = std.rand(0, odds[n]) == 0 ? `Mangle : `Count (n + 1)
	| _:
	;;
	-> state.mangle
}

const blank = {state, sb, c
	if std.rand(0, 2) == 0
		std.sbputs(sb, [",,", ",,,", ",, ,"][std.rand(0, 3)])
		state.mangle = `Init
	;;
	std.sbputc(sb, c)
	state.word = false
}

const firstchar = {state, sb, c
	if std.rand(0, 4) == 0
		std.sbputs(sb, [";", ",,", ",,,", ", ,,"][std.rand(0, 4)])
		state.mangle = `Init
	;;
	std.sbputc(sb, c)
	state.word = true
}

const mangle = {state, sb, c, line, off
	match c
	| '\'': std.sbputs(sb, [";", ";", ",", ",,", ",,,"][std.rand(0, 5)])
	| '.': std.sbputs(sb, [";", ",,", ",,", ",,,"][std.rand(0, 4)])
	| '?': std.sbputs(sb, ["?,", "?,,"][std.rand(0, 2)])
	| _:
		match std.rand(0, off < line.len && std.isblank(std.decode(line[off:])) ? 5 : 9)
		| 0: std.sbputc(sb, std.isupper(c) ? std.tolower(c) : std.toupper(c))
		| 1:
			std.sbputc(sb, c)
			std.sbputc(sb, c)
		| 2:
			std.sbputc(sb, c)
			std.sbputc(sb, c)
		| 3:
			std.sbputs(sb, [";", ",", ",,", "/"][std.rand(0, 4)])
			std.sbputc(sb, c)
		| 4:
			std.sbputs(sb, [";", ".", ",", ",,", "/"][std.rand(0, 5)])
			std.sbputc(sb, c)
		| 5: /* drop this char */
		| 6:
		| 7: std.sbputs(sb, [";", ".", ",", ",,", "/"][std.rand(0, 5)])
		| 8:
			std.sbputc(sb, std.decode(line[off:]))
			state.mangle = `Swap c
			-> void
		| _: std.assert(false, "unreachable\n")
		;;
	;;
	state.mangle = `Init
}

const dont = {state, sb, c
	/* always mangle apostrophes */
	match c
	| '\'':
		std.sbputs(sb, [";", ";", ",", ",,", ",,,"][std.rand(0, 5)])
		state.mangle = `Init
	| _: std.sbputc(sb, c)
	;;
	state.word = !std.isblank(c)
}

/* this whole file is a disaster tbh */
const crytype = {line
	if re.crytype == Zptr
		re.crytype = std.try(regex.compile( \
			"(sorry)|(Sorry)|(SORRY)|" \
			"(notice|warning)|(Notice|Warning)|(NOTICE|WARNING)|" \
			"(error|oops)|(Error|Oops)|(ERROR|OOPS)"))
	;;
	const subs = [ \
		"so sorry", "So sorry", "SO SORRY", \
		"i'm so sorry", "I'm so sorry", "I'M SO SORRY", \
		"i'm so so sorry", "I'm so so sorry", "I'M SO SO SORRY"][:]

	var l = regex.suball(re.crytype, line, subs)
	var sb = std.mksb()
	var state = [.mangle = `Init]
	for (c, off) : std.bycharoff(l)
		match step(&state)
		| `Swap p:
			std.sbputc(sb, p)
			state.mangle = `Init
		| `Mangle:
			if std.isblank(c)
				blank(&state, sb, c)
			elif !state.word
				firstchar(&state, sb, c)
			else
				mangle(&state, sb, c, l, off)
			;;
		| _: dont(&state, sb, c)
		;;
	;;
	std.slfree(l)
	-> std.sbfin(sb)
}
